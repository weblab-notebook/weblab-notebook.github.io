{"version":3,"file":"873-fcf123d44f578135f6cf.js","mappings":"kaACA,IAAIA,EAAkB,EAClBC,EAAuB,KAE3B,SAASC,IAKP,OAJ6B,OAAzBD,GAAiCA,EAAqBE,SAAW,kBACnEF,EAAuB,IAAIG,WAAW,kBAGjCH,EAGT,IACII,EAAoB,IADkB,oBAAhBC,aAA8B,EAAIC,EAAOC,SAAS,QAAQF,YAAcA,aACzD,SACrCG,EAAuD,mBAAjCJ,EAAkBK,WAA4B,SAAUC,EAAKC,GACrF,OAAOP,EAAkBK,WAAWC,EAAKC,IACvC,SAAUD,EAAKC,GACjB,IAAIC,EAAMR,EAAkBS,OAAOH,GAEnC,OADAC,EAAKG,IAAIF,GACF,CACLG,KAAML,EAAIM,OACVC,QAASL,EAAII,SAIjB,SAASE,EAAkBR,EAAKS,EAAQC,GACtC,QAAgBC,IAAZD,EAAuB,CACzB,IAAIR,EAAMR,EAAkBS,OAAOH,GAE/BY,EAAOH,EAAOP,EAAII,QAItB,OAFAf,IAAkBsB,SAASD,EAAMA,EAAOV,EAAII,QAAQF,IAAIF,GACxDb,EAAkBa,EAAII,OACfM,EAQT,IALA,IAAIE,EAAMd,EAAIM,OACVS,EAAMN,EAAOK,GACbE,EAAMzB,IACN0B,EAAS,EAENA,EAASH,EAAKG,IAAU,CAC7B,IAAIC,EAAOlB,EAAImB,WAAWF,GAC1B,GAAIC,EAAO,IAAM,MACjBF,EAAID,EAAME,GAAUC,EAGtB,GAAID,IAAWH,EAAK,CACH,IAAXG,IACFjB,EAAMA,EAAIoB,MAAMH,IAGlBF,EAAML,EAAQK,EAAKD,EAAKA,EAAMG,EAAsB,EAAbjB,EAAIM,QAC3C,IAAIL,EAAOV,IAAkBsB,SAASE,EAAME,EAAQF,EAAMD,GAE1DG,GADUnB,EAAaE,EAAKC,GACdM,QAIhB,OADAlB,EAAkB4B,EACXF,EAGT,IAAIM,EAAuB,KAE3B,SAASC,IAKP,OAJ6B,OAAzBD,GAAiCA,EAAqB7B,SAAW,kBACnE6B,EAAuB,IAAIE,WAAW,kBAGjCF,EAGT,IACIG,EAAoB,IADkB,oBAAhBC,aAA8B,EAAI7B,EAAOC,SAAS,QAAQ4B,YAAcA,aACzD,QAAS,CAChDC,WAAW,EACXC,OAAO,IAaF,SAASC,EAASC,GACvB,IACE,IAAIC,EAAS,mCAAsC,IAE/CC,EAAOvB,EAAkBqB,EAAO,oBAAwB,sBACxDG,EAAO3C,EACX,WAAcyC,EAAQC,EAAMC,GAC5B,IAAIC,EAAKX,IAAkBQ,EAAS,EAAI,GACpCI,EAAKZ,IAAkBQ,EAAS,EAAI,GACxC,OAlBwBf,EAkBEkB,EAlBGnB,EAkBCoB,EAjBzBV,EAAkBW,OAAO5C,IAAkBsB,SAASE,EAAKA,EAAMD,IAkBpE,QACA,kCAAqC,IAErC,kBAAqBmB,EAAIC,GAtB7B,IAA4BnB,EAAKD,EAFjCU,EAAkBW,S","sources":["webpack://weblab-website/./node_modules/@weblab-notebook/weblab-markdown/weblab_markdown_bg.js"],"sourcesContent":["import * as wasm from './weblab_markdown_bg.wasm';\nvar WASM_VECTOR_LEN = 0;\nvar cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory0;\n}\n\nvar lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\nvar cachedTextEncoder = new lTextEncoder('utf-8');\nvar encodeString = typeof cachedTextEncoder.encodeInto === 'function' ? function (arg, view) {\n  return cachedTextEncoder.encodeInto(arg, view);\n} : function (arg, view) {\n  var buf = cachedTextEncoder.encode(arg);\n  view.set(buf);\n  return {\n    read: arg.length,\n    written: buf.length\n  };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n  if (realloc === undefined) {\n    var buf = cachedTextEncoder.encode(arg);\n\n    var _ptr = malloc(buf.length);\n\n    getUint8Memory0().subarray(_ptr, _ptr + buf.length).set(buf);\n    WASM_VECTOR_LEN = buf.length;\n    return _ptr;\n  }\n\n  var len = arg.length;\n  var ptr = malloc(len);\n  var mem = getUint8Memory0();\n  var offset = 0;\n\n  for (; offset < len; offset++) {\n    var code = arg.charCodeAt(offset);\n    if (code > 0x7F) break;\n    mem[ptr + offset] = code;\n  }\n\n  if (offset !== len) {\n    if (offset !== 0) {\n      arg = arg.slice(offset);\n    }\n\n    ptr = realloc(ptr, len, len = offset + arg.length * 3);\n    var view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n    var ret = encodeString(arg, view);\n    offset += ret.written;\n  }\n\n  WASM_VECTOR_LEN = offset;\n  return ptr;\n}\n\nvar cachegetInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n  if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32Memory0;\n}\n\nvar lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\nvar cachedTextDecoder = new lTextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n* @param {string} input\n* @returns {string}\n*/\n\n\nexport function markdown(input) {\n  try {\n    var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n    var ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.markdown(retptr, ptr0, len0);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n\n    wasm.__wbindgen_free(r0, r1);\n  }\n}"],"names":["WASM_VECTOR_LEN","cachegetUint8Memory0","getUint8Memory0","buffer","Uint8Array","cachedTextEncoder","TextEncoder","module","require","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","undefined","_ptr","subarray","len","ptr","mem","offset","code","charCodeAt","slice","cachegetInt32Memory0","getInt32Memory0","Int32Array","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","markdown","input","retptr","ptr0","len0","r0","r1","decode"],"sourceRoot":""}